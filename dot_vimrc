" Kenny Root's vimrc
" http://github.com/kruton/dotfiles
"

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible
filetype off " workaround vundle ftdetect bug

source ~/.vim/settings.vim

" Unlet g:color_names to avoid loading color scheme several times
" when sourcing ~/.virmc a second time. Several commands would trigger
" sourcing color scheme :syntax on and :set t_Co=256 and of course
" command :colorscheme itself.
if has('eval') | unlet! g:colors_name | endif

if has('multi_byte')
  scriptencoding utf-8
  set enc=utf-8
  set fileencodings=ucs-bom,utf-8,latin1
  if version >= 700
    set lcs=tab:»·,trail:·,eol:¶,extends:>,precedes:<,nbsp:×
  else
    set lcs=tab:»·,trail:·,eol:¶,extends:>,precedes:<
  endif
endif

if has('syntax') | syntax on | endif
if has('autocmd')
  filetype on
  filetype plugin on
endif

" Don't wait 1s when pressing <esc>
set timeout timeoutlen=3000 ttimeoutlen=100

set history=400
set textwidth=0
if exists('+cryptmethod') | set cryptmethod=blowfish | endif

set wildmode=longest,list
set wildmenu

set splitbelow
set hidden
set nostartofline
set backspace=indent,eol,start
set whichwrap+=<,>,[,]
set wrap
set showbreak=:
set laststatus=2
set noshowmode
set shiftwidth=4
set shiftround
set softtabstop=4
set autoindent
set smartindent
set expandtab
set ignorecase
set infercase
set smartcase
set cino:0
set comments=sr:/*,mb:*,ex:*/
set formatoptions=tcqor
" set showfulltag
set visualbell
if has('cmdline_info')
  set ruler
  set showcmd
endif
set nonumber
set showmatch
if has('extra_search')
  set hlsearch
  set incsearch
endif
set nolist
set matchpairs+=<:>
set virtualedit=block
set display=lastline,uhex
if has('eval')
  let g:lex_uses_cpp=1
  let g:yacc_uses_cpp=1
  let g:load_doxygen_syntax=1
  let g:is_posix=1
  let g:c_gnu=1
  let g:netrw_special_syntax=1
  let g:netrw_liststyle=3
  let g:netrw_browse_split=4
  let g:vimsyntax_noerror=1

  " Required to see the current function name in the status bar.
  let Tlist_Process_File_Always = 1

  " Configure HTML output with :TOhtml
  " let html_number_lines=1
  let html_use_css=1
  let html_use_xhtml=1
  let html_dynamic_folds=1

  " Set up for the CSApprox.vim plugin.
  let g:CSApprox_verbose_level = 0
  let g:CSApprox_attr_map = { 'bold' : 'bold', 'italic' : '', 'sp' : '' }
endif

" Old paste macros
" nnoremap <F2> :set invpaste paste?<CR>
" imap <F2> <C-O><F2>
" set pastetoggle=<F2>

" This mapping allows to stay in visual mode when indenting with < and >
vnoremap > >gv
vnoremap < <gv

 map <F2>      :set paste!<CR>:set paste?<CR>
imap <F2> <C-O>:set paste<CR>:set paste?<CR>

if has('spell')
  map  <F8> :set spell!<CR>
endif

if has('autocmd')
  " vim -b : edit binary using xxd-format
  " See :help hex-editing
  augroup Binary
    au!
    au BufReadPre   *.dat let &bin=1
    au BufReadPost  *.dat if  &bin   | %!xxd
    au BufReadPost  *.dat set ft=xxd | endif
    au BufWritePre  *.dat if  &bin   | %!xxd -r
    au BufWritePre  *.dat endif
    au BufWritePost *.dat if  &bin   | %!xxd
    au BufWritePost *.dat set nomod  | endif
  augroup END
endif

" Use modelines
set modeline
set modelines=5

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" In an xterm the mouse should work quite well, thus enable it.
"set mouse=a

" This is an alternative that also works in block mode, but the deleted
" text is lost and it only works for putting the current register.
"vnoremap p "_dp

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Replace PageUp and PageDn with motion commands that don't screw
" with the cursor position.
map <silent> <PageUp> 1000<C-U>
map <silent> <PageDown> 1000<C-D>
imap <silent> <PageUp> <C-O>1000<C-U>
imap <silent> <PageDown> <C-O>1000<C-D>
set nostartofline

" Show help for keywords
au BufReadPost *.pl   set keywordprg=perldoc\ -f
au BufReadPost *.vim  map K :exe ":help ".expand("<cword>")<CR>
au BufReadPost .vimrc map K :exe ":help ".expand("<cword>")<CR>

" Solarized color scheme setup
let g:solarized_termcolors=256
set background=dark
colorscheme solarized

" Python universality
let s:python_until_eof = has("python3") ? "python3 << EOF" : "python << EOF"

" SnipMate mappings
:imap ,<Tab> <Plug>snipMateNextOrTrigger
:smap ,<Tab> <Plug>snipMateNextOrTrigger

" VimFiler as default file browser
let g:vimfiler_as_default_explorer = 1

" Enable file operation commands.
let g:vimfiler_safe_mode_by_default = 0

nnoremap <silent> <Leader>e :<C-U>VimFiler -buffer-name=explorer -split -simple -winwidth=35 -toggle -no-quit<CR>
nnoremap <silent> <Leader>E :<C-U>VimFiler<CR>
